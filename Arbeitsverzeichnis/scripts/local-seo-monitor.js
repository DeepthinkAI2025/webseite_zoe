#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class LocalSEOMonitor {
  constructor() {
    this.localPages = [
      'solaranlagen-berlin.html',
      'solaranlagen-hamburg.html',
      'solaranlagen-m√ºnchen.html',
      'solaranlagen-k√∂ln.html',
      'solaranlagen-frankfurt-am-main.html',
      'solaranlagen-stuttgart.html',
      'solaranlagen-d√ºsseldorf.html',
      'solaranlagen-dortmund.html',
      'solaranlagen-essen.html',
      'solaranlagen-leipzig.html',
      'solaranlagen-bremen.html',
      'solaranlagen-dresden.html',
      'solaranlagen-hannover.html',
      'solaranlagen-n√ºrnberg.html',
      'solaranlagen-duisburg.html',
      'solaranlagen-baden-w√ºrttemberg.html',
      'solaranlagen-bayern.html',
      'solaranlagen-brandenburg.html',
      'solaranlagen-hessen.html',
      'solaranlagen-mecklenburg-vorpommern.html',
      'solaranlagen-niedersachsen.html',
      'solaranlagen-nordrhein-westfalen.html',
      'solaranlagen-rheinland-pfalz.html',
      'solaranlagen-saarland.html',
      'solaranlagen-sachsen.html',
      'solaranlagen-sachsen-anhalt.html',
      'solaranlagen-schleswig-holstein.html',
      'solaranlagen-th√ºringen.html',
      'solaranlagen-ruhrgebiet.html',
      'solaranlagen-rhein-main-gebiet.html',
      'solaranlagen-rhein-neckar.html',
      'solaranlagen-stuttgart-region.html',
      'solaranlagen-m√ºnchen-region.html',
      'solaranlagen-hamburg-region.html',
      'solaranlagen-berlin-region.html',
      'solaranlagen-k√∂ln-region.html',
      'solaranlagen-deutschland.html'
    ];

    this.baseUrl = 'https://zoe-solar.de';
    this.publicDir = path.join(__dirname, '..', 'public');
  }

  async checkLocalPagesHealth() {
    console.log('üîç √úberpr√ºfe lokale Seiten-Integrit√§t...\n');

    const results = {
      total: this.localPages.length,
      healthy: 0,
      issues: [],
      missing: [],
      corrupted: []
    };

    for (const page of this.localPages) {
      const filepath = path.join(this.publicDir, page);

      try {
        if (!fs.existsSync(filepath)) {
          results.missing.push(page);
          console.log(`‚ùå Fehlt: ${page}`);
          continue;
        }

        const content = fs.readFileSync(filepath, 'utf8');

        // √úberpr√ºfe grundlegende HTML-Struktur
        if (!content.includes('<html') || !content.includes('<head>') || !content.includes('<body>')) {
          results.corrupted.push(page);
          console.log(`‚ö†Ô∏è  Korrupt: ${page} (fehlende HTML-Struktur)`);
          continue;
        }

        // √úberpr√ºfe lokale Schema-Markups
        if (!content.includes('LocalBusiness') && !content.includes('Organization')) {
          results.issues.push(`${page}: Fehlende Schema-Markups`);
          console.log(`‚ö†Ô∏è  Schema fehlt: ${page}`);
        }

        // √úberpr√ºfe Meta-Tags
        if (!content.includes('name="description"') || !content.includes('name="keywords"')) {
          results.issues.push(`${page}: Fehlende Meta-Tags`);
          console.log(`‚ö†Ô∏è  Meta-Tags fehlen: ${page}`);
        }

        // √úberpr√ºfe lokale Keywords im Title
        const titleMatch = content.match(/<title>(.*?)<\/title>/);
        if (titleMatch) {
          const title = titleMatch[1];
          if (!title.includes('Solaranlagen') && !title.includes('Photovoltaik')) {
            results.issues.push(`${page}: Unpassender Title-Tag`);
            console.log(`‚ö†Ô∏è  Title problematisch: ${page}`);
          }
        }

        results.healthy++;
        console.log(`‚úÖ OK: ${page}`);

      } catch (error) {
        results.corrupted.push(page);
        console.log(`‚ùå Fehler: ${page} (${error.message})`);
      }
    }

    return results;
  }

  async generateLocalSEOReport() {
    console.log('\nüìä Lokale SEO-Monitoring Report:');
    console.log('=====================================');

    const health = await this.checkLocalPagesHealth();

    console.log(`\nüìà Gesamtstatistik:`);
    console.log(`   ‚Ä¢ Gesamtseiten: ${health.total}`);
    console.log(`   ‚Ä¢ Gesunde Seiten: ${health.healthy}`);
    console.log(`   ‚Ä¢ Fehlende Seiten: ${health.missing.length}`);
    console.log(`   ‚Ä¢ Korrupte Seiten: ${health.corrupted.length}`);
    console.log(`   ‚Ä¢ Seiten mit Problemen: ${health.issues.length}`);

    if (health.missing.length > 0) {
      console.log(`\n‚ùå Fehlende Seiten:`);
      health.missing.forEach(page => console.log(`   ‚Ä¢ ${page}`));
    }

    if (health.corrupted.length > 0) {
      console.log(`\n‚ö†Ô∏è  Korrupte Seiten:`);
      health.corrupted.forEach(page => console.log(`   ‚Ä¢ ${page}`));
    }

    if (health.issues.length > 0) {
      console.log(`\nüîß Seiten mit Problemen:`);
      health.issues.forEach(issue => console.log(`   ‚Ä¢ ${issue}`));
    }

    // Sitemap-√úberpr√ºfung
    console.log(`\nüó∫Ô∏è Sitemap-Status:`);
    const sitemapPath = path.join(this.publicDir, 'sitemap-local.xml');
    if (fs.existsSync(sitemapPath)) {
      const sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
      const urlCount = (sitemapContent.match(/<url>/g) || []).length;
      console.log(`   ‚Ä¢ Lokale Sitemap: ‚úÖ (${urlCount} URLs)`);
    } else {
      console.log(`   ‚Ä¢ Lokale Sitemap: ‚ùå (fehlt)`);
    }

    const mainSitemapPath = path.join(this.publicDir, 'sitemap-main.xml');
    if (fs.existsSync(mainSitemapPath)) {
      const sitemapContent = fs.readFileSync(mainSitemapPath, 'utf8');
      const urlCount = (sitemapContent.match(/<url>/g) || []).length;
      console.log(`   ‚Ä¢ Haupt-Sitemap: ‚úÖ (${urlCount} URLs)`);
    } else {
      console.log(`   ‚Ä¢ Haupt-Sitemap: ‚ùå (fehlt)`);
    }

    // Empfehlungen
    console.log(`\nüí° Empfehlungen:`);
    if (health.missing.length > 0) {
      console.log(`   ‚Ä¢ Fehlende Seiten neu generieren mit: npm run seo:local:optimize`);
    }
    if (health.issues.length > 0) {
      console.log(`   ‚Ä¢ Schema-Markups und Meta-Tags √ºberpr√ºfen`);
    }
    console.log(`   ‚Ä¢ Sitemaps in Google Search Console einreichen`);
    console.log(`   ‚Ä¢ Lokale Seiten regelm√§√üig auf Aktualit√§t pr√ºfen`);

    return health;
  }

  async checkIndexingStatus() {
    console.log('\nüîç √úberpr√ºfe Indexierungsstatus...\n');

    // Simulierte Indexierungspr√ºfung (in Produktion w√ºrde hier eine API zu GSC/Search Console verwendet)
    console.log('üìä Indexierungsstatus (simuliert):');
    console.log('   ‚Ä¢ Google Index: 95% der Seiten indexiert');
    console.log('   ‚Ä¢ Bing Index: 92% der Seiten indexiert');
    console.log('   ‚Ä¢ Lokale Suchergebnisse: Aktiv f√ºr alle Regionen');

    console.log('\nüéØ N√§chste Schritte f√ºr Indexierung:');
    console.log('   1. Sitemaps in Google Search Console einreichen');
    console.log('   2. Bing Webmaster Tools benachrichtigen');
    console.log('   3. IndexNow f√ºr beschleunigte Indexierung aktivieren');
    console.log('   4. Lokale Business-Listings aktualisieren');
  }

  async runFullMonitoring() {
    console.log('üöÄ Starte vollst√§ndiges lokales SEO-Monitoring...\n');

    const healthReport = await this.generateLocalSEOReport();
    await this.checkIndexingStatus();

    // Zusammenfassung
    const successRate = (healthReport.healthy / healthReport.total) * 100;
    console.log(`\nüèÜ Monitoring-Zusammenfassung:`);
    console.log(`   ‚Ä¢ Erfolgsrate: ${successRate.toFixed(1)}%`);
    console.log(`   ‚Ä¢ Status: ${successRate >= 95 ? '‚úÖ Exzellent' : successRate >= 85 ? '‚ö†Ô∏è Gut' : '‚ùå Kritisch'}`);

    if (successRate < 100) {
      console.log(`\nüîß Automatische Korrekturen verf√ºgbar:`);
      console.log(`   ‚Ä¢ npm run seo:local:optimize (fehlende Seiten neu generieren)`);
      console.log(`   ‚Ä¢ npm run seo:local:report (erneute √úberpr√ºfung)`);
    }

    return healthReport;
  }
}

// CLI Interface
if (import.meta.url === `file://${process.argv[1]}`) {
  const monitor = new LocalSEOMonitor();

  const command = process.argv[2];

  switch (command) {
    case 'health':
      monitor.checkLocalPagesHealth().catch(console.error);
      break;
    case 'indexing':
      monitor.checkIndexingStatus().catch(console.error);
      break;
    case 'full':
      monitor.runFullMonitoring().catch(console.error);
      break;
    default:
      console.log('Lokale SEO-Monitoring f√ºr ZOE Solar');
      console.log('');
      console.log('Verwendung:');
      console.log('  node scripts/local-seo-monitor.js health     # Seiten-Integrit√§t pr√ºfen');
      console.log('  node scripts/local-seo-monitor.js indexing  # Indexierungsstatus pr√ºfen');
      console.log('  node scripts/local-seo-monitor.js full      # Vollst√§ndiges Monitoring');
      console.log('');
      console.log('Beispiel:');
      console.log('  node scripts/local-seo-monitor.js full');
      break;
  }
}

export default LocalSEOMonitor;
