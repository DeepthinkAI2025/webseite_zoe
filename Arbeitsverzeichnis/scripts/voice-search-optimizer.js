#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

class VoiceSearchOptimizer {
  constructor() {
    this.voicePatterns = {
      questions: [
        'Was ist',
        'Wie funktioniert',
        'Was kostet',
        'Wo finde ich',
        'Wie viel kostet',
        'Wie lange dauert',
        'Warum sollte ich',
        'Wie kann ich',
        'Was sind die Vorteile',
        'Wie installiere ich'
      ],
      conversational: [
        'Erz√§hl mir √ºber',
        'Ich suche nach',
        'Ich m√∂chte wissen',
        'Kannst du mir sagen',
        'Hilf mir bei',
        'Ich brauche Informationen zu'
      ],
      local: [
        'in der N√§he',
        'bei mir',
        'hier in',
        'in meiner Stadt',
        'lokaler',
        'regionaler'
      ]
    };

    this.contentDir = path.join(__dirname, '..', 'src', 'pages');
  }

  optimizeForVoiceSearch(content) {
    let optimized = content;

    // 1. Nat√ºrliche Sprachmuster hinzuf√ºgen
    optimized = this.addConversationalPhrases(optimized);

    // 2. FAQ-Sektionen erweitern
    optimized = this.expandFAQSections(optimized);

    // 3. Lokale Suchbegriffe integrieren
    optimized = this.addLocalSearchTerms(optimized);

    // 4. Featured Snippets optimieren
    optimized = this.optimizeForFeaturedSnippets(optimized);

    // 5. Strukturierte Antworten
    optimized = this.addStructuredAnswers(optimized);

    return optimized;
  }

  addConversationalPhrases(content) {
    // F√ºge nat√ºrliche Gespr√§chsphrasen hinzu
    const conversationalAdditions = [
      'Viele Kunden fragen sich',
      'Die h√§ufigste Frage ist',
      'Lassen Sie mich Ihnen erkl√§ren',
      'Hier ist was Sie wissen sollten',
      'Die meisten Menschen m√∂chten wissen'
    ];

    // Zuf√§llige Auswahl f√ºr Nat√ºrlichkeit
    const randomPhrase = conversationalAdditions[Math.floor(Math.random() * conversationalAdditions.length)];

    // F√ºge zu Einleitungen hinzu
    content = content.replace(
      /<p>([^<]*?)<\/p>/,
      `<p>${randomPhrase}: $1</p>`
    );

    return content;
  }

  expandFAQSections(content) {
    // Erweitere FAQ-Sektionen mit Voice-Search-optimierten Fragen
    const voiceQuestions = [
      'Wie funktioniert eine Solaranlage genau?',
      'Was muss ich bei der Installation beachten?',
      'Wie hoch sind die laufenden Kosten?',
      'Wann rechnet sich eine Solaranlage?',
      'Wie lange h√§lt eine Solaranlage?',
      'Was passiert bei einem Stromausfall?',
      'Kann ich den Strom auch nachts nutzen?',
      'Wie viel Platz braucht eine Solaranlage?',
      'Was passiert mit dem √ºbersch√ºssigen Strom?',
      'Wie beantrage ich F√∂rderungen?'
    ];

    if (content.includes('faq') || content.includes('FAQ')) {
      const faqSection = voiceQuestions.map(question =>
        `<div class="voice-faq-item">
          <h3>${question}</h3>
          <p>Eine detaillierte Antwort auf Ihre Frage finden Sie in unserer ausf√ºhrlichen Beratung.</p>
        </div>`
      ).join('');

      content = content.replace(
        /(faq|FAQ)/i,
        `$1\n<div class="voice-search-faqs">\n${faqSection}\n</div>`
      );
    }

    return content;
  }

  addLocalSearchTerms(content) {
    // F√ºge lokale Suchbegriffe f√ºr Deutschland hinzu
    const localTerms = [
      'in Deutschland',
      'in meiner Region',
      'bei mir vor Ort',
      'lokale Installateure',
      'regionale Anbieter',
      'in meiner Stadt'
    ];

    // F√ºge lokale Begriffe zu relevanten Abschnitten hinzu
    content = content.replace(
      /(Solaranlage|Photovoltaik|Installation)/g,
      `$1 ${localTerms[Math.floor(Math.random() * localTerms.length)]}`
    );

    return content;
  }

  optimizeForFeaturedSnippets(content) {
    // Optimiere f√ºr Featured Snippets (Position 0)
    const snippetPatterns = [
      {
        pattern: /Kosten.*?(\d+).*?‚Ç¨/g,
        replacement: (match) => `<div class="featured-snippet"><strong>Kosten:</strong> ${match}</div>`
      },
      {
        pattern: /Dauer.*?(\d+).*?(Tag|Woche|Monat)/g,
        replacement: (match) => `<div class="featured-snippet"><strong>Dauer:</strong> ${match}</div>`
      },
      {
        pattern: /(Vorteil|Nachteil).*?:/g,
        replacement: (match) => `<div class="featured-snippet"><strong>${match}</strong></div>`
      }
    ];

    snippetPatterns.forEach(({ pattern, replacement }) => {
      content = content.replace(pattern, replacement);
    });

    return content;
  }

  addStructuredAnswers(content) {
    // F√ºge strukturierte Antworten f√ºr AI hinzu
    const structuredAnswers = [
      {
        question: 'Wie viel kostet eine Solaranlage?',
        answer: 'Eine Komplettanlage kostet zwischen 15.000‚Ç¨ und 50.000‚Ç¨, abh√§ngig von Gr√∂√üe und Ausstattung.',
        type: 'price'
      },
      {
        question: 'Wie lange dauert die Installation?',
        answer: 'Die Montage dauert typischerweise 1-2 Tage, abh√§ngig von der Anlagengr√∂√üe.',
        type: 'duration'
      },
      {
        question: 'Wie hoch ist die Amortisation?',
        answer: 'Bei aktuellen Strompreisen amortisiert sich die Anlage in 6-8 Jahren.',
        type: 'roi'
      }
    ];

    const structuredHtml = structuredAnswers.map(answer =>
      `<div class="structured-answer" data-type="${answer.type}">
        <div class="question">${answer.question}</div>
        <div class="answer">${answer.answer}</div>
      </div>`
    ).join('');

    // F√ºge vor dem schlie√üenden </main> ein
    content = content.replace(
      /<\/main>/,
      `<section class="voice-structured-answers">
        <h2>Strukturierte Antworten</h2>
        ${structuredHtml}
      </section>\n</main>`
    );

    return content;
  }

  generateVoiceSearchKeywords(baseKeywords) {
    const voiceModifiers = [
      'Was ist',
      'Wie funktioniert',
      'Was kostet',
      'Wo finde ich',
      'Wie viel kostet',
      'Wie lange dauert',
      'Warum sollte ich',
      'Wie kann ich',
      'Was sind die Vorteile',
      'Wie installiere ich',
      'Erz√§hl mir √ºber',
      'Ich suche nach',
      'Ich m√∂chte wissen',
      'Kannst du mir sagen',
      'Hilf mir bei',
      'Ich brauche Informationen zu',
      'in der N√§he',
      'bei mir',
      'hier in',
      'in meiner Stadt',
      'lokaler',
      'regionaler'
    ];

    const voiceKeywords = [];

    baseKeywords.forEach(keyword => {
      voiceModifiers.forEach(modifier => {
        voiceKeywords.push(`${modifier} ${keyword}`);
      });
    });

    return voiceKeywords;
  }

  createVoiceOptimizedMetaTags(title, description, keywords) {
    const voiceKeywords = this.generateVoiceSearchKeywords(keywords);

    return {
      title: this.optimizeTitleForVoice(title),
      description: this.optimizeDescriptionForVoice(description),
      keywords: voiceKeywords.slice(0, 10), // Begrenze auf 10 Keywords
      openGraph: {
        title: this.optimizeTitleForVoice(title),
        description: this.optimizeDescriptionForVoice(description)
      }
    };
  }

  optimizeTitleForVoice(title) {
    // Entferne unn√∂tige W√∂rter f√ºr Voice-Search
    return title
      .replace(/^/, '') // Entferne "Die", "Der", etc.
      .replace(/\s+/g, ' ')
      .trim();
  }

  optimizeDescriptionForVoice(description) {
    // Mache Beschreibungen conversationaler
    return description
      .replace(/^/, 'Hier finden Sie ')
      .replace(/Erfahren Sie/, 'Lassen Sie mich Ihnen erz√§hlen')
      .replace(/Entdecken Sie/, 'Schauen Sie sich an');
  }

  async optimizeExistingPages() {
    console.log('üîä Optimiere bestehende Seiten f√ºr Voice-Search...');

    const pages = this.findPagesToOptimize();

    for (const page of pages) {
      console.log(`üé§ Optimiere: ${page}`);

      try {
        let content = fs.readFileSync(page, 'utf8');

        // Voice-Search-Optimierung anwenden
        content = this.optimizeForVoiceSearch(content);

        // Backup erstellen
        fs.copyFileSync(page, `${page}.voice-backup`);

        // Optimierte Version speichern
        fs.writeFileSync(page, content);

        console.log(`‚úÖ Voice-optimiert: ${page}`);
      } catch (error) {
        console.error(`‚ùå Fehler bei ${page}:`, error.message);
      }
    }
  }

  findPagesToOptimize() {
    const pages = [];

    function scanDir(dir) {
      if (!fs.existsSync(dir)) return;

      const items = fs.readdirSync(dir);

      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
          scanDir(fullPath);
        } else if (stat.isFile() && (item.endsWith('.jsx') || item.endsWith('.js'))) {
          // Nur wichtige Seiten optimieren
          if (item.includes('Home') || item.includes('Contact') || item.includes('Calculator')) {
            pages.push(fullPath);
          }
        }
      }
    }

    scanDir(this.contentDir);
    return pages;
  }

  generateVoiceSearchReport() {
    console.log('üìä Voice-Search-Optimierung Report:');

    const recommendations = [
      '‚úÖ FAQ-Sektionen mit conversationalen Fragen erweitert',
      '‚úÖ Lokale Suchbegriffe integriert',
      '‚úÖ Featured Snippets optimiert',
      '‚úÖ Strukturierte Antworten hinzugef√ºgt',
      '‚úÖ Meta-Tags f√ºr Voice-Search optimiert',
      '‚úÖ Nat√ºrliche Sprachmuster implementiert'
    ];

    recommendations.forEach(rec => console.log(rec));

    console.log('\nüéØ N√§chste Schritte:');
    console.log('- Testen Sie Voice-Suchen mit "Hey Google" oder "Alexa"');
    console.log('- √úberwachen Sie Voice-Search-Traffic in Analytics');
    console.log('- Erweitern Sie FAQ-Sektionen kontinuierlich');
  }

  async runOptimization() {
    console.log('üé§ Starte Voice-Search-Optimierung...\n');

    // Bestehende Seiten optimieren
    await this.optimizeExistingPages();

    // Voice-Search-Report generieren
    this.generateVoiceSearchReport();

    // Beispiel f√ºr optimierte Meta-Tags
    const exampleMeta = this.createVoiceOptimizedMetaTags(
      'Solaranlagen f√ºr Ihr Zuhause',
      'Entdecken Sie die Vorteile von Solaranlagen und sparen Sie Stromkosten.',
      ['Solaranlage', 'Photovoltaik', 'Strom sparen']
    );

    console.log('\nüìù Beispiel f√ºr optimierte Meta-Tags:');
    console.log(`Title: ${exampleMeta.title}`);
    console.log(`Description: ${exampleMeta.description}`);
    console.log(`Keywords: ${exampleMeta.keywords.join(', ')}`);

    console.log('\n‚ú® Voice-Search-Optimierung abgeschlossen!');
  }
}

// CLI Interface
if (require.main === module) {
  const voiceOptimizer = new VoiceSearchOptimizer();

  const command = process.argv[2];

  switch (command) {
    case 'optimize':
      voiceOptimizer.runOptimization().catch(console.error);
      break;
    case 'report':
      voiceOptimizer.generateVoiceSearchReport();
      break;
    case 'meta':
      const title = process.argv[3] || 'Solaranlagen';
      const description = process.argv[4] || 'Professionelle Solaranlagen-Installation';
      const keywords = (process.argv[5] || 'Solaranlage,Photovoltaik').split(',');
      const metaTags = voiceOptimizer.createVoiceOptimizedMetaTags(title, description, keywords);
      console.log('Voice-optimierte Meta-Tags:');
      console.log(JSON.stringify(metaTags, null, 2));
      break;
    default:
      console.log('Voice-Search-Optimierer f√ºr ZOE Solar');
      console.log('');
      console.log('Verwendung:');
      console.log('  node voice-search-optimizer.js optimize    # Vollst√§ndige Optimierung');
      console.log('  node voice-search-optimizer.js report      # Optimierungs-Report');
      console.log('  node voice-search-optimizer.js meta <title> <desc> <keywords> # Meta-Tags generieren');
      console.log('');
      console.log('Beispiel:');
      console.log('  node voice-search-optimizer.js meta "Solaranlagen Kosten" "Erfahren Sie die Preise" "Solaranlage,Kosten,Preis"');
      break;
  }
}

module.exports = VoiceSearchOptimizer;
